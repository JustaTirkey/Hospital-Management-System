/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospital_management;

import java.sql.Connection;
import java.util.Date;
import java.sql.DriverManager;
import static java.sql.JDBCType.NULL;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author tirke
 */
public class BillGeneration extends javax.swing.JFrame {

    /**
     * Creates new form BillGeneration
     */
    public BillGeneration() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel16 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        generate = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        print_Patient_Details = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Pgender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pAddr = new javax.swing.JTextField();
        disease = new javax.swing.JTextField();
        tCost = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        otherCharges = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        total_Tcost = new javax.swing.JTextField();
        pid_input = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        medGiven = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        medTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        medCost = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        room_bill = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("ROOM BILL");

        back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(153, 0, 0));
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        clear.setForeground(new java.awt.Color(0, 153, 153));
        clear.setText("CLEAR FIELDS");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        generate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        generate.setForeground(new java.awt.Color(0, 153, 0));
        generate.setText("GENERATE BILL");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setText("Rs.");

        print_Patient_Details.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel3.setText("Name");

        pName.setEditable(false);

        jLabel4.setText("Gender");

        jLabel5.setText("Address");

        Pgender.setEditable(false);

        jLabel6.setText("Disease Treated");

        pAddr.setEditable(false);

        disease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diseaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout print_Patient_DetailsLayout = new javax.swing.GroupLayout(print_Patient_Details);
        print_Patient_Details.setLayout(print_Patient_DetailsLayout);
        print_Patient_DetailsLayout.setHorizontalGroup(
            print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(print_Patient_DetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, print_Patient_DetailsLayout.createSequentialGroup()
                        .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(140, 140, 140)
                        .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Pgender, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                            .addComponent(pName)))
                    .addGroup(print_Patient_DetailsLayout.createSequentialGroup()
                        .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(93, 93, 93)
                        .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pAddr)
                            .addComponent(disease))))
                .addContainerGap())
        );
        print_Patient_DetailsLayout.setVerticalGroup(
            print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(print_Patient_DetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Pgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(print_Patient_DetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(disease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        tCost.setEditable(false);
        tCost.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCostActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("Total Payable Amount");

        otherCharges.setEditable(false);
        otherCharges.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Rs.");

        total_Tcost.setEditable(false);

        pid_input.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pid_inputFocusLost(evt);
            }
        });
        pid_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pid_inputKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Enter Patient ID");

        medGiven.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medicines Given", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        medTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Medicine Name", "Quantity", "Cost", "Total Cost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(medTable);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Total Medicines Cost");

        medCost.setEditable(false);
        medCost.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Rs.");

        javax.swing.GroupLayout medGivenLayout = new javax.swing.GroupLayout(medGiven);
        medGiven.setLayout(medGivenLayout);
        medGivenLayout.setHorizontalGroup(
            medGivenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medGivenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(medGivenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(medGivenLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(167, 167, 167)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(medCost, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        medGivenLayout.setVerticalGroup(
            medGivenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medGivenLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(medGivenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(medCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 40, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("BILL GENERATION");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("Rs.");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("Other Charges");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("Total Tests Cost");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("Rs.");

        room_bill.setEditable(false);
        room_bill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Test Name", "Cost"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(medGiven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel23))
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel20))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(otherCharges, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(room_bill, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(total_Tcost)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(tCost, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generate)
                        .addGap(260, 260, 260)
                        .addComponent(clear))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(print_Patient_Details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(151, 151, 151))
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(88, 88, 88)
                                .addComponent(pid_input, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(back)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(back))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(pid_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(print_Patient_Details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(jLabel7)
                            .addComponent(total_Tcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(room_bill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(otherCharges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(tCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(272, 272, 272))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(medGiven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(generate)
                            .addComponent(clear))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        new HospitalMang().setVisible(true);
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        DefaultTableModel model = (DefaultTableModel) medTable.getModel();
        int rows = model.getRowCount();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                model.removeRow(0);
            }
        }
        model=(DefaultTableModel)jTable2.getModel();
        rows = model.getRowCount();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                model.removeRow(0);
            }
        }
        pid_input.setText(null);
        pName.setText(null);
        Pgender.setText(null);
        disease.setText(null);
        total_Tcost.setText(null);
        medCost.setText(null);
        room_bill.setText(null);
        otherCharges.setText(null);
        tCost.setText(null);
        pAddr.setText(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        String str = disease.getText();
        String sd = pid_input.getText();
        
        if(sd.equals("")){
            JOptionPane.showMessageDialog(this, "Please,Enter Patient Id");
        }
        else if(str.equals("")){
            JOptionPane.showMessageDialog(this, "Please,Enter the disease treated");
        }
        else{
            int p = Integer.parseInt(pid_input.getText());
            DefaultTableModel model = (DefaultTableModel) medTable.getModel();
            DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
            try {
                //Class.forName("java.sql.Driver");
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hm_db", "root", "myOracle9@ju");
                Statement stmt = conn.createStatement();
                conn.setAutoCommit(false);
                String query;
//                System.out.println("Degging");
                query = "Select CONCAT(fname,\" \", lname),gender,CONCAT(HNo,\" \", Street, \" \",City, \" \",State) from patient where pid=" + p + ";";
               // query = "SELECT CONCAT(fname, ' ', lname) AS full_name, gender, CONCAT(HNo, ' ', street, ' ', city, ' ', state) AS address, doc_id FROM patient WHERE pid = " + p + ";";
                ResultSet rs = stmt.executeQuery(query);
                System.out.println("" + query);
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(null, "Please,Enter a valid Patient ID");
                }
                pName.setText("" + rs.getString(1));
                Pgender.setText("" + rs.getString(2));
                pAddr.setText("" + rs.getString(3));
                
//                pName.setText("" + rs.getString("full_name"));
//                Pgender.setText("" + rs.getString("gender"));
//                pAddr.setText("" + rs.getString("address"));
                    
                query = "Select pid from in_patient where pid=" + p + " and discharge_date is null;";
                ResultSet rs2 = stmt.executeQuery(query);
                System.out.println("" + query);
                
                //    if pid was not hospitalized 
                if (!rs2.next()) { 
                    query = "insert into out_patient values(" + p + ",CURRENT_TIMESTAMP,null);";
                    stmt.executeUpdate(query);
                    System.out.println("" + query);
                    System.out.println("" + query);
                    query = "Select tid from hadtest where pid=" + p + " and DATE(testdate)=CURRENT_DATE;";
                    System.out.println("" + query);
                    ResultSet rs1 = stmt.executeQuery(query);
                    Arrays.fill(testid, 0);
                    while (rs1.next()) {
                        int i = rs1.getInt(1);
                        testid[i - 1] = 1;
                    }
                    System.out.println("" + query);
                    int sno = 1; // serial number for Output test taken
                    float tf = 0; //total test cost 
                    for (int x = 0; x < 10; x++) {
                        System.out.println("" + x);
                        if (testid[x] == 1) {
                            System.out.println("" + testid[x]);
                            query = "Select tname ,tcost from test where tid=" + (x + 1) + ";";
                            System.out.println("" + query);
                            ResultSet rs3 = stmt.executeQuery(query);
                            if (rs3.next()) {
                                model1.addRow(new Object[]{sno, rs3.getString(1), rs3.getFloat(2)});
                                tf += rs3.getFloat(2);
                                sno++;
                            }
                        }
                    }
                    System.out.println("" + tf);
                    total_Tcost.setText("" + tf);                   
                    room_bill.setText("0");
                    otherCharges.setText("200");
                    query = "Select mid,qty from had_medicine where pid=" + p + " and DATE(med_date)=CURRENT_DATE;";
                    System.out.println("" + query);
                    stmt.executeQuery(query);
                    rs1 = stmt.executeQuery(query);
                    System.out.println("" + query);
                    Arrays.fill(medid, 0);
                    Arrays.fill(medqty, 0);
                    while (rs1.next()) {
                        int i = rs1.getInt(1);
                        medid[i - 1] = 1;
                        medqty[i - 1] = rs1.getInt(2);
                    }
                    sno = 1;
                    float fl = 0;
                    for (int x = 0; x < 50; x++) {
//                        System.out.println("\naagya med ke pass"+medid[x]+"\n");
                        if (medid[x] == 1) {
                            query = "Select mname ,mcost from medicine where mid=" + (x + 1) + ";";
                            System.out.println("" + query);
                            ResultSet rs3 = stmt.executeQuery(query);
                            System.out.println("" + query);
                            if (rs3.next()) {
                                float pertot= medqty[x]*(rs3.getFloat(2));
                                System.out.println(""+pertot);
                                model.addRow(new Object[]{ sno, rs3.getString(1), medqty[x],rs3.getFloat(2), pertot});
                                fl += (medqty[x]) * (rs3.getFloat(2));
                                sno++;
                            }
                        }
                    }
                    medCost.setText("" + fl);
                    float hg = tf + fl + 200;
                    tCost.setText("" + hg);
                    rs1.close();
                    rs.close();
                }else{
                    query = "insert into out_patient values(" + p + ",CURRENT_TIMESTAMP,null);";
                    stmt.executeUpdate(query);
                    System.out.println("" + query);
                    int roomcosttot=0;
                    query = "Select disease,rid, Date(arrival_date) from in_patient where pid=" + p + " and discharge_date is null;";
                    ResultSet rs1 = stmt.executeQuery(query);
                    System.out.println("" + query);
                    String gfd = "";
                    int dsd = 0, dfg = 1;
                    if (rs1.next()) {
                        query = "SELECT DATEDIFF(CURRENT_DATE, '" + rs1.getString(3) + "');";
                        dsd = rs1.getInt(2);
                        gfd = rs1.getString(1);
                        System.out.println("" + query);
                    }
                    ResultSet rs10 = stmt.executeQuery(query);
                    if (rs10.next()) {
                        dfg = rs10.getInt(1);
                        query = "Select roomtype from room where rid=" + dsd + ";";
                        System.out.println("" + query);
                    }
                    ResultSet rs8 = stmt.executeQuery(query);
                    if (rs8.next()) {
                        query = "Select rcost from room_cost where roomtype=\"" + rs8.getString(1) + "\";";
                        System.out.println("Roomtyope"+rs8.getString(1));
                        System.out.println("" + query);
                        rs8 = stmt.executeQuery(query);
                        System.out.println("" + query);
                    }
                    if (rs8.next()) {
                        roomcosttot = (dfg+1) * rs8.getInt(1);
//                        System.out.println("\nRoomm coat chanhin"+roomcosttot+"    "+rs8.getInt(1)+ dfg+"\n");
                        room_bill.setText("" + roomcosttot);
                        disease.setText("" + gfd);
                    }
                    rs1.close();
                    query = "Select tid from hadtest inner join in_patient on hadtest.pid = in_patient.pid where in_patient.pid=" + p + " and in_patient.discharge_date is null;";
                    rs1 = stmt.executeQuery(query);
                    Arrays.fill(testid, 0);
                    while (rs1.next()) {
                        int i = rs1.getInt(1);
                        testid[i - 1] = 1;
                    }
                    int sno = 1;
                    float tf = 0;
                    otherCharges.setText("1000");
                    for (int x = 0; x < 10; x++) {
                        if (testid[x] == 1) {
                            query = "Select tname ,tcost from test where tid=" + (x + 1) + ";";
                            ResultSet rs3 = stmt.executeQuery(query);
                            if (rs3.next()) {
                                model1.addRow(new Object[]{"" + sno, rs3.getString(1), "" + rs3.getFloat(2)});
                                tf += rs3.getFloat(2);
                                sno++;
                            }
                        }
                    }
                    total_Tcost.setText("" + tf);
                    query = "Select mid,qty from had_medicine inner join in_patient on had_medicine.pid = in_patient.pid where in_patient.pid=" + p + " and discharge_date is null;";
                    rs1 = stmt.executeQuery(query);
                    sno = 1;
                    float fl = 0;
                    Arrays.fill(medid, 0);
                    Arrays.fill(medqty, 0);
                    while (rs1.next()) {
                        int i = rs1.getInt(1);
                        medid[i - 1] = 1;
                        medqty[i - 1] = rs1.getInt(2);

                    }
                    for (int x = 0; x < 50; x++) {
                        if (medid[x] == 1) {
                            query = "Select mname ,mcost from medicine where mid=" + (x + 1) + ";";
                            ResultSet rs3 = stmt.executeQuery(query);
                            if (rs3.next()) {
                                float pertot= medqty[x]*(rs3.getFloat(2));
                                System.out.println(""+pertot);
                                model.addRow(new Object[]{ sno, rs3.getString(1), medqty[x],rs3.getFloat(2), pertot});
//                                model.addRow(new Object[]{"" + sno, rs3.getString(1), "" + medqty[x], "" + rs3.getFloat(2), "" + pertot});
                                fl += (medqty[x]) * (rs3.getFloat(2));
                            }
                            sno++;
                        }
                    }
                    medCost.setText("" + fl);
                float hg = fl + tf + 1000 + roomcosttot;
                tCost.setText("" + hg);
             
                }
                
                
                String a;
//                int p = Integer.parseInt(pid_input.getText());
                ResultSet rsNew;
                DateFormat df = new SimpleDateFormat("yyyy/MM/dd.hh:mm:ss");
                Date da = new Date();
                a = df.format(da);
                String query1;
                str = disease.getText();
                query1 = "update out_patient SET disease=\"" + str + "\" where pid=" + p + " and Date(arrival_date)=CURRENT_DATE;";
                System.out.println(query1);
                stmt.executeUpdate(query1);
                query="Select pid from in_patient where pid="+p+" and discharge_date is null;";
                System.out.println(query);
                rsNew=stmt.executeQuery(query);
                System.out.println("" + query);
                
//                System.out.println("Mein aa gya");
                if(rsNew.next()){
                    query1 = "update in_patient set discharge_date=\"" + a + "\" where pid=" + p + " and discharge_date is null;";
                    System.out.println(""+query1);
                    stmt.executeUpdate(query1);
                }
                float mcost, tcost, rchg, other;
                mcost = Float.parseFloat(medCost.getText());
                tcost = Float.parseFloat(total_Tcost.getText());
                rchg = Float.parseFloat(room_bill.getText());
                other = Float.parseFloat(otherCharges.getText());
                query1 = "insert into bill values(" + p + "," + mcost + "," + tcost + "," + rchg + "," + other + ",\"" + a + "\");";
                System.out.println(""+query1);
                stmt.executeUpdate(query1);
                JOptionPane.showMessageDialog(null,"Give the receipt");
                clear.doClick();
                conn.commit();
            }
            catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error in connectivity 1" + e.getMessage());
            }
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_generateActionPerformed

    private void pid_inputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pid_inputFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pid_inputFocusLost
    int testid[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int medid[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int medqty[] = new int[1000];
    private void pid_inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pid_inputKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_pid_inputKeyReleased

    private void tCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCostActionPerformed

    private void diseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diseaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diseaseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillGeneration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillGeneration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillGeneration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillGeneration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BillGeneration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Pgender;
    private javax.swing.JButton back;
    private javax.swing.JButton clear;
    private javax.swing.JTextField disease;
    private javax.swing.JButton generate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField medCost;
    private javax.swing.JPanel medGiven;
    private javax.swing.JTable medTable;
    private javax.swing.JTextField otherCharges;
    private javax.swing.JTextField pAddr;
    private javax.swing.JTextField pName;
    private javax.swing.JTextField pid_input;
    private javax.swing.JPanel print_Patient_Details;
    private javax.swing.JTextField room_bill;
    private javax.swing.JTextField tCost;
    private javax.swing.JTextField total_Tcost;
    // End of variables declaration//GEN-END:variables
}
